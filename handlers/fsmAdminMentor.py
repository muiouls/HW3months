from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import ADMINS
from . import client_kb
from .client_kb import start_markup
from database.bot_db import sql_command_insert


class FSMAdmin(StatesGroup):
    telegram_id = State()
    name = State()
    direction = State()
    age = State()
    group = State()
    submit = State()


async def fsm_start(message: types.Message):
    if message.chat.type == 'private' and message.from_user.id in ADMINS:
        await FSMAdmin.telegram_id.set()
        await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω {message.from_user.full_name}')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –º–µ–Ω—Ç–æ—Ä–∞ :', reply_markup=client_kb.cancel_markup)
    elif message.from_user.id not in ADMINS:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º(')
    else:
        await message.answer('–ü–∏—à–∏ –≤ –ª–∏—á–∫—É')


async def load_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ  id —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
    else:
        async with state.proxy() as data:
            data['telegram_id'] = message.text
        await FSMAdmin.next()
        await message.answer('–ö–∞–∫ –∑–æ–≤—É—Ç –º–µ–Ω—Ç–æ—Ä–∞?')


async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMAdmin.next()
    await message.answer('–ö–∞–∫–æ–µ —É –Ω–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?', reply_markup=client_kb.direction_markup)


async def load_direction(message: types.Message, state: FSMContext):
    if message.text not in ["BACK", "FRONT", "ANDROID", "IOS"]:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏")
    else:
        async with state.proxy() as data:
            data['direction'] = message.text
        await FSMAdmin.next()
        await message.answer('–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –º–µ–Ω—Ç–æ—Ä—É ?', reply_markup=client_kb.cancel_markup)


async def load_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞')
    elif not 12 < int(message.text) < 60:
        await message.answer('–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëâüëà')
    else:
        async with state.proxy() as data:
            data['age'] = message.text
        await FSMAdmin.next()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –º–µ–Ω—Ç–æ—Ä?')


async def load_group(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['group'] = message.text
        await message.answer(
            f"id: {data['telegram_id']} \n"
            f"–ò–º—è: {data['name']} \n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['direction']} \n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']} \n"
            f"–ì—Ä—É–ø–ø–∞: {data['group']}")
        await FSMAdmin.next()
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ?', reply_markup=client_kb.submit_markup)


async def submit_state(message: types.Message, state: FSMContext):
    if message.text == '–î–ê':
        await sql_command_insert(state)
        await state.finish()
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—Ç–æ—Ä–∞!', reply_markup=start_markup)
    elif message.text == '–ó–ê–ù–û–í–û':
        await FSMAdmin.telegram_id.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –º–µ–Ω—Ç–æ—Ä–∞ :')


async def cancel_reg(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
        await message.answer('–î–æ –≤—Å—Ç—Ä–µ—á–∏ üòì', reply_markup=start_markup)


def register_handler_fsm(dp: Dispatcher):
    dp.register_message_handler(cancel_reg, state='*', commands=['cancel'])
    dp.register_message_handler(cancel_reg, Text(equals='cancel', ignore_case=True), state='*')

    dp.register_message_handler(fsm_start, commands=['reg'])
    dp.register_message_handler(load_id, state=FSMAdmin.telegram_id)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(load_direction, state=FSMAdmin.direction)
    dp.register_message_handler(load_age, state=FSMAdmin.age)
    dp.register_message_handler(load_group, state=FSMAdmin.group)
    dp.register_message_handler(submit_state, state=FSMAdmin.submit)
